## Working Name: Fairly Advanced Exceptions (FAE)
### The Plan :tm:
Replace .eh_frame and .gcc_except_table

### lookup table
Look through every function section, then construct a address map based on
the order of the functions. If really necessary, sort alphabetically if that
doesn't work. Use relocation to make sure that address map is accurate.

### Language Specific Data Area
Probably ok as it is, will need to write custom functions to interpret LSDA

### Exception handling frames
DWARF defines a state machine that describes the state of the stack.
The issue with dwarf is that it's massively overbuilt for the task.
Ultimately, all one really needs to do to unwind a stack is a series
of pops and determine the CFA. For this reason, the new exception handling
state machine has two instructions: pop, and skip. Pop pops into the register,
and skip skips part of the stack. The header for any given frame includes length
and a pointer to lsda augmentation data.

#### Implementation
GCC is pain. I am going to write a program that reads an object's eh_frame,
adds a .newtable segment, and does not bother with compiler shenanigans.
At link time, a similar program will read all of the input objects, and
generates a lookup table at compile time.

Also, __cxa_throw and other functions will obviously have to be rewritten.
They'll probably be patched to call a custom exception routine library.
The library will have to be written in assembler, because I have no
idea how libgcc manages to restore register state.

## Functions to be defined
__cxa_throw
_Unwind_Resume

### Future improvements
 - Use Khalil-style constant time lookup tables.
 - Emit a call graph to delete unnecessary exception handling frames and lsda
 - change lsda to not use leb128 encoding
 - Actually make this a gcc patch instead of a jank wrapper
